plugins {
    id 'java'
    id 'io.quarkus' version '3.16.4'
    id 'com.github.node-gradle.node' version '7.1.0'
    id 'jacoco'
}

repositories {
    mavenCentral()
    mavenLocal()
}

java {
    sourceCompatibility = JavaVersion.VERSION_24
    targetCompatibility = JavaVersion.VERSION_24
}

dependencies {
    implementation enforcedPlatform('io.quarkus.platform:quarkus-bom:3.16.4')
    implementation 'io.quarkus:quarkus-arc'
    implementation 'io.quarkus:quarkus-rest'
    implementation 'io.quarkus:quarkus-rest-jackson'
    implementation 'io.quarkus:quarkus-config-yaml'
    implementation 'io.quarkus:quarkus-scheduler'
    implementation 'io.quarkus:quarkus-rest-client'
    implementation 'io.quarkus:quarkus-rest-client-jackson'
    implementation 'io.quarkus:quarkus-smallrye-health'
    implementation 'io.quarkus:quarkus-container-image-docker'
    implementation 'io.quarkus:quarkus-micrometer'
    implementation 'io.quarkus:quarkus-smallrye-openapi'
    // implementation 'io.quarkus:quarkus-logging-json' // Removed for human-readable logs
    implementation 'io.quarkus:quarkus-hibernate-validator'
    
    compileOnly 'org.projectlombok:lombok:1.18.38'
    annotationProcessor 'org.projectlombok:lombok:1.18.38'
    
    testImplementation 'io.quarkus:quarkus-junit5'
    testImplementation 'io.rest-assured:rest-assured'
    testImplementation 'io.quarkus:quarkus-junit5-mockito'
    testImplementation 'org.awaitility:awaitility'
}

// Standard Gradle test configuration
test {
    systemProperty "java.util.logging.manager", "org.jboss.logmanager.LogManager"
    useJUnitPlatform()
    
    // Only run unit tests (exclude integration tests)
    exclude '**/service/*IntegrationTest.class'
    exclude '**/service/*ScenarioTest.class'
    
    // JaCoCo configuration 
    jacoco {
        enabled = true
    }
}

// Integration test configuration
configurations {
    integrationTestImplementation.extendsFrom testImplementation
    integrationTestRuntimeOnly.extendsFrom testRuntimeOnly
}

sourceSets {
    integrationTest {
        java {
            srcDir 'src/test/java'
        }
        resources {
            srcDir 'src/test/resources'
        }
        compileClasspath += main.output + test.output
        runtimeClasspath += main.output + test.output
    }
}

task integrationTest(type: Test) {
    description = 'Runs integration tests'
    group = 'verification'
    
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    
    systemProperty "java.util.logging.manager", "org.jboss.logmanager.LogManager"
    useJUnitPlatform()
    
    // Only run integration tests
    include '**/service/*IntegrationTest.class'
    include '**/service/*ScenarioTest.class'
    
    // Enable JaCoCo for integration tests
    jacoco {
        enabled = true
        destinationFile = file("$buildDir/jacoco/integrationTest.exec")
    }
}

// Make check task run both unit and integration tests
check.dependsOn integrationTest

// JaCoCo configuration
jacoco {
    toolVersion = "0.8.11"
}

// Configure JaCoCo test report
jacocoTestReport {
    dependsOn test
    
    reports {
        xml.required.set(true)
        html.required.set(true)
        csv.required.set(true)
    }
    
    executionData.setFrom(fileTree(dir: 'build/jacoco', include: '**/*.exec'))
    
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                '**/config/**',
                '**/dto/**',
                '**/model/**',
                '**/Application.class'
            ])
        }))
    }
}

// Configure JaCoCo verification
jacocoTestCoverageVerification {
    dependsOn jacocoTestReport
    
    violationRules {
        rule {
            limit {
                minimum = 0.70 // 70% minimum coverage
            }
        }
    }
    
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                '**/config/**',
                '**/dto/**',
                '**/model/**',
                '**/Application.class'
            ])
        }))
    }
}

// Make test report run automatically with test
test.finalizedBy jacocoTestReport

// Task to generate coverage for both unit and integration tests
task jacocoMergedReport(type: JacocoReport) {
    dependsOn test, integrationTest
    
    executionData.setFrom(files(
        "$buildDir/jacoco/test.exec",
        "$buildDir/jacoco/integrationTest.exec"
    ).filter { it.exists() })
    
    sourceDirectories.setFrom(files(sourceSets.main.allSource.srcDirs))
    classDirectories.setFrom(files(sourceSets.main.output))
    
    reports {
        xml.required.set(true)
        html.required.set(true)
        csv.required.set(true)
    }
    
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                '**/config/**',
                '**/dto/**',
                '**/model/**',
                '**/Application.class'
            ])
        }))
    }
}

compileJava {
    options.encoding = 'UTF-8'
    options.compilerArgs << '-parameters'
}

compileTestJava {
    options.encoding = 'UTF-8'
}

quarkus {
    buildForkOptions {
        systemProperty 'quarkus.native.builder-image', 'quay.io/quarkus/ubi-quarkus-graalvmce-builder-image:jdk-24'
    }
}

node {
    version = '22.17.0'
    npmVersion = '11.4.2'
    workDir = file("${project.projectDir}/frontend")
    npmWorkDir = file("${project.projectDir}/frontend")
    nodeProjectDir = file("${project.projectDir}/frontend")
}

task frontendInstall(type: NpmTask) {
    description = 'Install npm dependencies'
    args = ['install']
}

task buildFrontend(type: NpmTask, dependsOn: frontendInstall) {
    description = 'Build frontend application'
    args = ['run', 'build']
}

task copyFrontendToResources(type: Copy, dependsOn: buildFrontend) {
    description = 'Copy frontend build to Quarkus static resources'
    from "${project.projectDir}/frontend/dist"
    into "${project.projectDir}/src/main/resources/META-INF/resources"
}

processResources.dependsOn copyFrontendToResources
build.dependsOn copyFrontendToResources